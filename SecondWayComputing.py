import math
poisk=1
flag=1
y=1
v=1
kn=0
mc=1
r2l=1
mm=1
u1=1
mmm=1
uu0=1
ek=1
fb=1
l1=1
l3=1
di=1
c0=1
lm=1.2 * pow(10,-7) #Lm_—É –°–û–ë–°–¢–í. –ò–ù–î–£–ö–¢–ò–í–ù–û–°–¢–¨ –£–°–¢–ê–ù–û–í–ö–ò
lmc=lm*c0
C0=254* pow(10,-6)#Co_—É –ï–ú–ö–û–°–¢–¨ –ö–û–ù–î–ï–ù–°–ê–¢–û–†–û–í –£–°–¢–ê–ù–û–í–ö–ò
p3=7.1*pow(10,-8)#RO_–∑ –£–î–ï–õ. –≠/–°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –ó–ê–ì–û–¢–û–í–ö–ò,
mod_upr=68*pow(10,9)#E_–∑ –ú–û–î–£–õ–¨ –£–ü–†–£–ì–û–°–¢–ò –ó–ê–ì–û–¢–û–í–ö–ò,
pm=2640 # Pm_–∑ –ü–õ–û–¢–ù–û–°–¢–¨ –ó–ê–ì–û–¢–û–í–ö–ò, ( –∫–≥/–º3)
l0=0.030 # lo_–∑ –î–õ–ò–ù–ê –ó–ê–ì–û–¢–û–í–ö–ò, –º
dh=0.1514 # D–Ω_–∑ –ù–ê–†–£–ñ–ù–´–ô –î–ò–ê–ú–ï–¢–† –ó–ê–ì–û–¢–û–í–ö–ò, –º
h0=0.0012 # Ho_–∑ –¢–û–õ–©–ò–ù–ê –°–¢–ï–ù–ö–ò –ó–ê–ì–û–¢–û–í–ö–ò, –º
p1=1,78*pow(10,-8) #RO_–∏ –£–î–ï–õ. –≠/–°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –ò–ù–î–£–ö–¢–û–†–ê, (–û–º*–º)
a=0.004
b=0.008
hb=0.005
lv=0.150
dv=0.153 #D–∏_–≤ –í–ù–£–¢–†–ï–ù–ù–ò–ô –î–ò–ê–ú–ï–¢–† –ò–ù–î–£–ö–¢–û–†–ê , –º
n1=7 #N1_–∏ –ß–ò–°–õ–û –í–ò–¢–ö–û–í –ò–ù–î–£–ö–¢–û–†–ê
l1=0.036 #l1_–∏ –î–õ–ò–ù–ê (–í–´–°–û–¢–ê) –ò–ù–î–£–ö–¢–û–†–ê, –º
R0=24*pow(10,6)#Ro_—É –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò, –û–º
dn=0.169#D–Ω_–∏ –ù–ê–†–£–ñ–ù–´–ô –î–ò–ê–ú–ï–¢–† –ò–ù–î–£–ö–¢–û–†–ê , –º
sp=700*pow(10,6)#SP_–∑ –ü–†–ï–î–ï–õ –¢–ï–ö–£–ß–ï–°–¢–ò –ó–ê–ì–û–¢–û–í–ö–ò, –ù/–º2
h1=0.004 # H–∏_1 –í–´–°–û–¢–ê –í–ò–¢–ö–ê –ò–ù–î–£–ö–¢–û–†–ê (–ü–û –î–õ–ò–ù–ï), –º
ey=700 *pow(10,6)#e'_–∑ –ú–û–î–£–õ–¨ –£–ü–†–û–ß–ù–ï–ù–ò–Ø –ó–ê–ì–û–¢–û–í–ö–ò, –ù/–º2
eps=3#eo_–∑ –ö–û–ù–ï–ß–ù–ê–Ø –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–ê–Ø –î–ï–§–û–†–ú–ê–¶–ò–Ø –ó–ê–ì–û–¢–û–í–ö–ò - ùëíùúëùëò
H_izol=0.0009#H–∏–∑–æ–ª_–∏ - –¢–û–õ–©–ò–ù–ê –ò–ó–û–õ–Ø–¶–ò–ò –ú–ï–ñ–î–£ –í–ò–¢–ö–ê–ú–ò, –º
U0=7000#Uo_—É –ù–ê–ß–ê–õ–¨–ù–û–ï –ù–ê–ü–†–Ø–ñ–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò, –í
kappa=1
mu0=1.0
f0 = 0.5 / (3.14 * math.pow((1 / lmc - r2l), 0.5))
over_f0 = 0.5 / (3.14 * math.pow(lmc, 0.5))
fz = p3 / (3.14 * mu0 * h0 * h0)  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ä–∞–∑—Ä—è–¥–∞, –ì—Ü
# {–¥–ª—è –Ω–µ–¥–æ–ø—É—â–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–º–∞–≥–Ω–∏—Ç–Ω–æ–π –ø–æ–¥—É—à–∫–∏"}
w3 = math.pow(mod_upr / pm, 0.5) * 2 / dh
f3 = w3 / 2 / 3.14  # { —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ }
    #     { –∫–æ–ª–µ–±–∞–Ω–∏–π –∑–∞–≥–æ—Ç–æ–≤–∫–∏, –ì—Ü }
    # _____________________________________________________________________________________________________________________________
    #     { dh-–ù–ê–†–£–ñ–ù–´–ô –î–ò–ê–ú–ï–¢–† –ó–ê–ì–û–¢–û–í–ö–ò }
db = dh - 2 * h0  # { db-–í–ù–£–¢–†–ï–ù–ù–ò–ô –î–ò–ê–ú–ï–¢–† –ó–ê–ì–û–¢–û–í–ö–ò

def Prikids(y,ek,u1):
        ZOLOTO = (pow(5, 0.5)-1)/2
        def1 = y
        defold = def1
        if def1 < ek: def1 = defold + ZOLOTO*abs(defold-ek)
        else: def1 = ek + (1-ZOLOTO)*abs(defold-ek)
        drob = (def1 + ek) / ek/2
        if defold-ek > 0:
            if drob < 1:
             uu0 = u1 * drob
            else: uu0 = u1 / drob
        else:
            if drob < 1: uu0 = u1 / drob
            else: uu0 = u1 * drob
        if (defold/ek) < 0.01:
            uu0 = 2 * u1 / drob
        print("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ [–∫–í] Uo = "+str(uu0)+" –∫–í")

if v == 1:  # —Ä–∞–∑–¥–∞—á–∞ }
    ly = l0 / db
    print("–†–∞–∑–¥–∞—á–∞")
    print(ly)

else:  # { –û–ë–ñ–ò–ú }
    ly = l1 / dv
if kn < 0.1:
    if poisk==1:
        print("L/D = ", ly)
        if ly < 1:
            kn = 3.783890521981891 * ly - 7.795224937947945 * ly * ly + 4.714887625113096 * math.pow(ly,
                                                                                                      3) + 6.984777813396215 * math.pow(
                ly, 4) - 13.53957485592525 * math.pow(ly, 5) + 9.187983184383594 * math.pow(ly,
                                                                                        6) - 3.048218155556006 * math.pow(
                ly, 7) + 0.4929535896014099 * math.pow(ly, 8) - 3.094887626324646E-2 * math.pow(ly, 9)
        else:
            if ly < 2:
                kn = 0.69026 + 0.06 * ly
            else:
                kn = 0.7669266667 + 0.021666667 * ly
if poisk==1:
    print(" –§–∞–∫—Ç–æ—Ä –ø–æ–ª—è , –ö–Ω = ", kn)
    if fz < (f0/2):
        fp = 0.5 * f0
    if abs(fz - f0) < f0 / 2:
        fp = 0.8 * f0
    if fz > 1.5 * f0:
        print(" –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –ú–ò–£ –ù–ï–¶–ï–õ–ï–°–û–û–ë–†–ê–ó–ù–ê ")  # –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω–æ–π –Ω–∞–¥–ø–∏—Å—å—é –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
#<<<<<<< HEAD
if poisk==1 or mm==0:
    print(' –ö–û–ù–¢–†–û–õ–¨ –ü–ê–†–ê–ú–ï–¢–†–û–í [ 1 - –î–ê ], [ 0 - –ù–ï–¢ ] ? ')  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    kp1=input()
else:
    kp1 = 0
if poisk==1 and mm > 0:
    U0 = u1
    print("U0 = "+str(U0)+"–∫–í")
    u2=int(input("–ó–∞–¥–∞–π—Ç–µ U0, –∫–í"))
    Prikids(y,ek,u1)
    u1 = u2 * 1000
    U0 = u1
if poisk==0 and mmm > 0:
    U0 = uu0

# {1} Repeat {–Ω–∞—á–∞–ª–æ}
    wq = fp * 2.0 * 3.14
    if w3 > wq * 3: ef = 0.5 * ek
    else:
        if w3 < wq / 3:
            ef = 0
        else: ef = 0.25 * ek
#=======
    if poisk==1 or mm==0:
        print(' –ö–û–ù–¢–†–û–õ–¨ –ü–ê–†–ê–ú–ï–¢–†–û–í [ 1 - –î–ê ], [ 0 - –ù–ï–¢ ] ? ')  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
        kp1=input()
    else:kp1 = 0
    if poisk==1 and mm > 0:
            U0 = u1
            u1 = u1 * 1000
            U0 = u1
    if poisk==0 and mmm > 0:U0 = uu0

#______________________1_____________________________________________________________________________________________
    else:  # –†–ê–ó–î–ê–ß–ê
# { –û–ë–ñ–ò–ú }
        vg = 1 * (-1)
        if l0 / dh < 1:
            l3 = l0 / math.pow((1 - ef), 0.5)
            h3 = h0 / math.sqrt(1 - ef)
        else:
            l3 = l0
            h3 = h0 / (1 - ef)
        dz = dh * (1 - ef)  # { –°–†–ï–î–ù–ò–ô –ù–ê–†–£–ñ–ù–´–ô –î–ò–ê–ú–ï–¢–† –ó–ê–ì–û–¢–û–í–ö–ò }
        dm = dz - 2.0 * h3  # { –°–†–ï–î–ù–ò–ô –í–ù–£–¢–†–ï–ù–ù–ò–ô –î–ò–ê–ú–ï–¢–† –ó–ê–ì–û–¢–û–í–ö–ò }
        wr = (dv - dh) / 2.0
    x3 = pow((p3 / (3.14 * mu0 * fp)), 0.5)
    x1 = pow((p1 / (mu0 * 3.14 * fp)), 0.5)
    if x1 < 2 * a / 3:
        xb = x1
    else:
        xb = 2 * a / 3
        z = b / (hb + xb)  # {hb - –ó–ê–ó–û–† –ú–ï–ñ–î–£ –¢–û–ö–û–ü–û–î–í–û–î–ê–ú–ò }
        lb = (0.5 * l1 * math.log((2.0 * l1) / (a + b) + 0.5) + (
                math.log((hb + xb) / (b + xb)) + (z * z - 1) * math.log(1 + z * z) / (2.0 * z * z) + (
                    2.0 / z * math.atan(z))) * lv) * pow(10,-7)
        rb = p1 * (l1 + 2.0 * lv) / (a * b)
        xi = 0
#======================================================================================================================
    if v == 0:
# begin { –û–ë–ñ–ò–ú }
        if 0.5 * x1 < h1 / 3.0:
            xi = 0.5 * x1
        else:
            xi = h1 / 3.0
        di = dv + 2.0 * xi
    else:  # –æ–±–∂–∏–º
        di = dn - h1  # { –†–ê–ó–î–ê–ß–ê }

# { –∏–Ω–¥—É–∫—Ç–æ—Ä —Å—Ä–µ–¥–Ω–∏–π }
    if l1 / di < 1.0 and l1 / di > 0.3:
        Lind = di * di / l1 * (4.1 + 3.9 * (l1 / di - 0.3)) * n1 * n1 * pow(10,-7)
    else:
        if l1 / di > 1:  # then { –∏–Ω–¥—É–∫—Ç–æ—Ä –¥–ª–∏–Ω–Ω—ã–π }
            Lind = di * di / l1 * (9.9 - (3.2 * di) / l1) * n1 * n1 * pow(10,-7)
        else:  # { –∏–Ω–¥—É–∫—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏–π }
            Lind = di * di / l1 * (4.1 + 3.9 * (l1 / di - 0.3)) * n1 * n1 * pow(10,-7)
        if x1 <= h1:
            xr = x1
        else:
            xr = h1
        if 3 <= h3 / 3.0:
            xz = x3 / 2.0
        else:
            xz = h3 / 3.0
        if v == 1:
            dr = dm + 2.0 * xz  # { –†–ê–ó–î–ê–ß–ê }
# { dr - –†–ê–°–ß–ï–¢–ù–´–ô –î–ò–ê–ú–ï–¢–† –ó–ê–ì–û–¢–û–í–ö–ò}
        else:
            dr = dz - 2.0 * xz  # { –û–ë–ñ–ò–ú }
        if l3 / dr < 1.0 and l3 / dr > 0.3:
            vb = 1
            q0 = 2.0 / math.pow(3.0, 0.5)
    # { –∑–∞–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥–Ω—è—è }
            Lzag = dr * dr / l3 * (4.1 + 3.9 * (l3 / dr - 0.3)) * pow(10,-7)
        else:  # { begin else }
            vb = 0
            q0 = 1
        if l3 / dr > 1.0:  # then { –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –¥–ª–∏–Ω–Ω–∞—è }
            Lzag = dr * dr / l3 * (9.9 - 3.2 * dr / l3) * pow(10,-7)
        else:
            print("... –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ú–ò–£ –Ω–µ—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–∞...")  # –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å –æ–∫–Ω–æ —Å –¥–∞–Ω–Ω–æ–π –Ω–∞–¥–ø–∏—Å—å—é –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö

        vb = 1
        q0 = 2.0 / math.pow(3.0, 0.5)

        Lzag = dr * dr / l3 * (4.1 + 3.9 * (l3 / dr - 0.3)) * pow(10,-7)

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    if x3 < h3:
        xs = x3
    else:
        xs = h3
    Rzag = p3 * 3.14 * dr / (l3 * xs)  # { Rzag - –ê–ö–¢–ò–í–ù–û–ï –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –ó–ê–ì–û–¢–û–í–ö–ò }
    hm = (l1 - H_izol * (n1 - 1)) * 1000 / n1  # { hm - –í–´–°–û–¢–ê –í–ò–¢–ö–ê –ò–ù–î–£–ö–¢–û–†–ê }
#========================================================================================================================
    if hm < 0:
# begin
        print("–∫–£-–∫–£ !! –∫–£-–∫–£ !! –∫–£-–∫–£ !!") #–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ –æ–∫–Ω–æ
        print(" –í–´–°–û–¢–ê –í–ò–¢–ö–ê –ò–ù–î–£–ö–¢–û–†–ê < 0 !!")
# Delay(3000) –ó–∞–¥–µ—Ä–∂–∫–∞
# end
    Rind = p1 * 3.14 * di * n1 * n1 / l1 / xr  # { Rind - –ê–ö–¢–ò–í–ù–û–ï –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –ò–ù–î–£–ö–¢–û–†–ê }
    if l1 / di > 1.0:
        Lind = di * di / l1 * (9.9 - 3.2 * di / l1) * n1 * n1 * pow(10,-7)
    else:
        Lind = di * di / l1 * (4.1 + 3.9 * (l1 / di - 0.3)) * n1 * n1 * pow(10,-7)

if v == 1:
    if l1 / di < 1.0:
        fb = 4.8
    else:
        fb = 5.0
        m9 = fb * pow((1 + (l1 + l3) * (l1 + l3)) / (di*di), 0.5) - 4.5 * pow(((1 + (l1 - l3) * (l1 - l3) / di / di), 0.5) * (n1 * pow(10,-7)))
        m8 = (dr * dr * di) / (l1 * l3)
        M_ind_zag = m9 * m8

if v == 2:
    if l3 / dr < 1:
        fb = 4.8
    else:
        fb = 5.0
        m9 = fb * pow(1 + (l1 + l3) * (l1 + l3) / dr*dr,0.5)-4.5*pow((1 + (l1 - l3) * (l1 - l3) / (dr*dr),0.5)*n1*pow(10,-7))
        m8 = dr * di * di / (l3 * l1)
        M_ind_zag = m8 * m9

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    kq = M_ind_zag / Lzag
    qq = 2.0 * 3.14 * fp * Lzag / Rzag
    k2 = qq / math.pow((1 + qq * qq), 0.5)
    lnn = Lzag * kq * kq * k2 * k2
    rn = Rzag * kq * kq * k2 * k2
    lo = Lind - lnn
    ro = Rind + rn
    ls = lm + lb + lo
    rs = R0 + rb + ro
    s1 = rs / (2.0 * ls)
    ww = pow((abs(1.0 / (c0 * ls) - s1 * s1)), 0.5)
    c9 = (1.0 / (c0 * ls) - s1 * s1)
    if c9 < 0 and flag > 1:
        print("–ö—É –∫—É —Ä–∞–∑—Ä—è–¥ –∞–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π")  # then
 #_______________________________________________________________________________
    if c9 < 0:
        ww = 1
        q1 = ww / s1
    q3 = ww * (Lzag / Rzag)
    if c9 < 0:
        f1 = 0
    else:
        f1 = math.atan(q1 / (q1 * q3 - q3 / q1 - 1.0))
    s3 = ww / q3
    k3 = 1  # {sqrt((1+1/q1/q1)/(1-(1/q1-1/q3)*(1/q1-1/q3)))}
    E0 = 0.5 * c0 * U0 * U0
#_____________________________________________________________________________________________________________________
    if (v == 0):  # then { –û–ë–ñ–ò–ú }
        pw = mu0 * E0 * (n1 * kn / l3) * (n1 * kn / l3) / ls
    else:
    # { –†–ê–ó–î–ê–ß–ê }
        pw = (mu0 * E0 * kq * kq * kn * kn) / (ls * l3 * l3)
        pq = pw * math.exp(0 - 3.14 / (2.0 * q1))
    if c9 < 0:  # then
        fq = 10
    else:
        fq=ww/(2.0 * 3.14)
        # Repeat{3}
        print(' –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è ===> –ñ–º–∏ –Ω–∞ <Enter> >>')
        """q0q = Ord(klav)
        gotoxy(1, 1)
    Until
    {3}(q0q=13)
    end
    {end if (kp1 ==1)}"""
    abt = abs(fp - fq)
    if (abt > 1):
        fp = fq
        flag = flag + 1
    while (abt < 1):
        io = 1  # { –ú–ò–û–ú(–≠) , c. 79 }
        lw = lm + lb
        alfa1 = Lind / lw
        alfa3 = Lzag * n1 * n1 / lw
        m13 = M_ind_zag * n1 / lw
        Gamma0 = R0 * math.pow((c0 / lw), 0.5)
        Gamma1 = Rind * math.pow((c0 / lw), 0.5)
        Gamma3 = Rzag * n1 * n1 * math.pow((c0 / lw), 0.5)
        ka = 4 * ey * lw * c0 / pm / dh / dh
        dd = 4 * sp * lw * c0 / pm / dh / dh
        bb = mu0 * (c0 * U0 * n1 * kn) * (c0 * U0 * n1 * kn) / (pm * dh * h0 * l0 * l0)
        b1 = mu0 * c0 / 2.0 / lw * n1 * U0 * kn / l3 * n1 * U0 * kn / l3


